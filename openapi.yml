openapi: 3.0.3
info:
  version: 1.0.0
  title: APISuite Billing Extension
  description: APISuite Billing Extension REST API
  license:
    name: MPL-2.0
paths:
  /health:
    get:
      tags: [ system ]
      summary: Healthcheck endpoint
      description: >
        Checks the general health status of the app servers.
        This usually means verifying connectivity to external dependencies.
      responses:
        '200':
          description: Healthcheck result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          $ref: '#/components/responses/Internal'
  /metrics:
    get:
      tags: [ system ]
      summary: System metrics for Prometheus scraping
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
  /packages:
    get:
      tags: [ packages ]
      summary: List credit packages
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: sort_by
          description: Sorting field
          in: query
          schema:
            type: string
            default: price
            enum:
              - name
              - price
              - credits
        - name: order
          description: Sorting order
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Package model list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [ packages ]
      summary: Create a package
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      requestBody:
        description: Package payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagePayload'
      responses:
        '201':
          description: Package model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /packages/{id}:
    get:
      tags: [ packages ]
      summary: Retrieve a package
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Package model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [ packages ]
      summary: Update a package
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: number
      requestBody:
        description: Package payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackagePayload'
      responses:
        '200':
          description: package model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Package'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [ packages ]
      summary: Delete a package
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: number
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /organizations:
    post:
      tags: [ organizations ]
      summary: Setup an organization
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      requestBody:
        description: Initial organization data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                credits:
                  type: number
      responses:
        '201':
          description: Organization model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /organizations/{id}:
    get:
      tags: [ organizations ]
      summary: Retrieve an organization
      description: >
        Returns an organization based on the ID.
        Usable by admins.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of organization to fetch
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Organization model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [ organizations ]
      summary: Update organization credits
      description: >
        Only accessible to admins.
        Used primarily to manage (add/subtract) user's credits.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Organization ID
          required: true
          schema:
            type: number
      requestBody:
        description: Organization info payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credits:
                  type: number
                  description: A positive number will cause the credits to be added, a negative will deduct
      responses:
        '200':
          description: Organization model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /organizations/{id}/subscriptions:
    delete:
      tags: [ organizations ]
      summary: Cancels an organization subscription
      description: Invoked by a user when it wants to cancel the (only) active credit subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Organization ID
          required: true
          schema:
            type: number
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /organizations/{id}/invoice-notes:
    patch:
      tags: [ organizations ]
      summary: Update invoice data
      description: >
        Used primarily to manage invoice data.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Organization ID
          required: true
          schema:
            type: number
      requestBody:
        description: Organization invoice notes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceNotes'
      responses:
        '200':
          description: Organization model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /subscriptions:
    get:
      tags: [ subscriptions ]
      summary: List subscriptions
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: sort_by
          description: Sorting field
          in: query
          schema:
            type: string
            default: price
            enum:
              - name
              - price
              - credits
        - name: order
          description: Sorting order
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Subscription model list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [ subscriptions ]
      summary: Create a subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      requestBody:
        description: Package payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPayload'
      responses:
        '201':
          description: Subscription model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /subscriptions/{id}:
    get:
      tags: [ subscriptions ]
      summary: Retrieve a subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Subscription ID
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Subscription model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [ subscriptions ]
      summary: Update a subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Subscription ID
          required: true
          schema:
            type: number
      requestBody:
        description: Package payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPayload'
      responses:
        '200':
          description: package model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [ subscriptions ]
      summary: Delete a subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Subscription ID
          required: true
          schema:
            type: number
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}:
    get:
      tags: [ users ]
      summary: Retrieve a user
      description: >
        Returns a user based on the ID.
        Usable by the user to get information about itself or by admins to retrieve any user.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: number
      responses:
        '200':
          description: User model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [ users ]
      summary: Update user credits
      description: >
        Only accessible to admin users (user can't manage their own credits).
        Used primarily to manage (add/subtract) user's credits.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: number
      requestBody:
        description: User info payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credits:
                  type: number
                  description: A positive number will cause the credits to be added, a negative will deduct
      responses:
        '200':
          description: User model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /users/{id}/subscriptions:
    delete:
      tags: [ users ]
      summary: Cancels a user subscription
      description: Called by the user when it wants to cancel the (only) active credit subscription
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: number
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}/invoice-notes:
    get:
      tags: [ users ]
      summary: User's invoice notes
      description: >
        Returns invoice data based on the ID.
        Usable by the user to get information about itself or by admins to retrieve any user.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Invoice Notes model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvoiceNotes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [ users ]
      summary: Update invoice data
      description: >
        Used primarily to manage invoice data.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: number
      requestBody:
        description: User invoice notes
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceNotes'
      responses:
        '200':
          description: User model
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvoiceNotes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /purchases:
    get:
      tags: [ purchases ]
      summary: List user's transactions
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      responses:
        '200':
          description: Purchase model list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Purchase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /purchases/{id}:
    get:
      tags: [ purchases ]
      summary: Retrieve transaction details
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Purchase ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Purchase model list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Purchase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /purchases/packages/{id}:
    post:
      tags: [ purchases ]
      summary: Purchase a credits package
      description: >
        This creates a new payment object in the payment processing provider (PPP).
        The return of this endpoint is an URL to the payment provider where the user can complete the payment.
        Only after the provider confirms the payment's success (via webhook) will the credits be available.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Package ID
          required: true
          schema:
            type: number
      requestBody:
        description: Organization ID
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                organizationId:
                  type: number
                  description: Organization ID
      responses:
        '200':
          description: Payment processor checkout page url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /purchases/subscriptions/{id}:
    post:
      tags: [ purchases ]
      summary: Purchase a subscription
      description: >
        This endpoint allows a user to start or change a subscription.
        If the user has no valid mandate for recurring charges in the payment processing provider, the first payment
        will require the user's consent. In this case the endpoint returns an URL.
        Otherwise, if a valid mandate exists, everything happens on the backend and the user has to take no further action (response is 204).
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Subscription ID
          required: true
          schema:
            type: number
      requestBody:
        description: Organization ID
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                organizationId:
                  type: number
                  description: Organization ID
      responses:
        '204':
          description: No content
        '200':
          description: Payment processor checkout page url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /purchases/subscriptions/:
    patch:
      tags: [ purchases ]
      summary: Update subscription payment
      description:
        This endpoint allows a user to update the payment method in use for the active subscription.
        will require the user's consent. In this case the endpoint returns an URL.
        It will update the mandateId on the backend for further use.
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      responses:
        '204':
          description: No content
        '200':
          description: Payment processor checkout page url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /webhooks/subscription:
    post:
      tags: [ webhooks ]
      summary: Subscription payment webhook
      description: Called by the payment processing provider on subscription payment status changes.
      requestBody:
        description: Webhook request payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
      responses:
        '200':
          description: Webhook response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /webhooks/subscription_first:
    post:
      tags: [ webhooks ]
      summary: Subscription first-payment webhook
      description: Called by the payment processing provider on subscription payment status changes.
      requestBody:
        description: Webhook request payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
      responses:
        '200':
          description: Webhook response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /webhooks/topup:
    post:
      tags: [ webhooks ]
      summary: Package (topup) payment webhook
      description: Called by the payment processing provider on isolated payment status changes.
      requestBody:
        description: Webhook request payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
      responses:
        '200':
          description: Webhook response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /webhooks/update_payment_method:
    patch:
      tags: [ webhooks ]
      summary: Payment Update webhook
      description: Called by the payment processing provider on subscription payment method changes.
      requestBody:
        description: Webhook request payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
      responses:
        '200':
          description: Webhook response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /settings:
    get:
      tags: [ settings ]
      summary: List settings
      security:
        - cookieAuth: [ ]
        - bearerAuth: [ ]
      responses:
        '200':
          description: Settings list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        vatRate:
                          type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    Organization:
      type: object
      properties:
        id:
          type: number
        credits:
          type: number
        subscriptionId:
          type: string
        nextPaymentDate:
          type: string
        invoiceNotes:
          type: string
    User:
      type: object
      properties:
        id:
          type: number
        credits:
          type: number
        subscriptionId:
          type: string
        nextPaymentDate:
          type: string
    Package:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        price:
          type: number
        credits:
          type: number
    PackagePayload:
      type: object
      required:
        - name
        - price
        - credits
      properties:
        name:
          type: string
        price:
          type: number
        credits:
          type: number
    Subscription:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        price:
          type: number
        credits:
          type: number
        periodicity:
          type: string
    SubscriptionPayload:
      type: object
      required:
        - name
        - price
        - credits
        - periodicity
      properties:
        name:
          type: string
        price:
          type: number
        credits:
          type: number
        periodicity:
          type: string
    Purchase:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        method:
          type: number
        status:
          type: number
        amount:
          type: object
          properties:
            value:
              type: string
            currency:
              type: string
        createdAt:
          type: string
        credits:
          type: number
        type:
          type: string
          enum:
            - topup
            - subscription
    PaymentWebhook:
      type: object
      properties:
        id:
          type: number
          description: Payment id
    Health:
      type: object
      properties:
        status:
          type: string
        time:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    InvoiceNotes:
      type: object
      properties:
        invoiceNotes:
          type: string


  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Internal:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
    bearerAuth:
      type: http
      scheme: bearer
